# LRP1_ODE_run.py 
# Automatically generated by Netflux on 18-Jan-2023 

# %%
from math import isclose
import numpy as np 
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt 
import LRP1_ODE 
import LRP1_ODE_params
import pandas as pd
import seaborn as sns
from IPython.display import display
# %%
[speciesNames, tau, ymax, y0, w, n, EC50] = LRP1_ODE_params.loadParams()
S = len(speciesNames)
R = len(w)
bax_idx = speciesNames.index('Bax')
cas3_idx = speciesNames.index('cas3')
celldeath_idx = speciesNames.index('cellDeath')

sorted_species = [
	'FGF', 'FGFR',
	'FLT3L', 'FLT3',
	'EGF', 'EGFR',
	'PDGF', 'PDGFR',
	'NRG1', 'ERBB',
	'SCF', 'KIT',
	'VEGF', 'VEGFR',
	'IGF1', 'IGF1R',
	'LRP1ag', 'LRP1',
	'JAK', 'STAT',
	'Ras', 'Raf', 'MEK12', 'ERK12', 'RSK', 'CREB',
	'PI3K', 'PDK1', 'Akt', 'IKK', 'IkB', 'NFkB',
	'NOX', 'ROS', 'Trxt', 'Trx', 'ASK1',
	'MEK36', 'p38', 'MEK47', 'JNK',
	'AP1', 'p53', 'Noxa', 'PUMA',
	'Bad', 'Bim', 'Bcl2t', 'Bcl2', 'Bax',
	'MOMP', 'cytc', 'Smac', 'xIAPt', 'xIAP',
	'cas9', 'cas3', 'iCADt', 'iCAD', 'CAD', 'PARP',
	'DNAfrag', 'apoptosis', 'cellDeath'
]
sorted_indices = [speciesNames.index(name) for name in sorted_species]

tspan = [0, 50]
t_eval = np.linspace(*tspan, tspan[1]*2+1)

# %% Simulate different combinations of LRP1-agonist and ROS inputs
N = 11
M = 13
ws_lrp1ag = np.linspace(0, 1, N)
ws_ros = np.linspace(0, 0.6, M)
conditions = {
	'ros_0.05_lrp_0.2': (0.2, 0.05),
	'ros_0.4_lrp_0.2': (0.2, 0.4),
	'ros_0.4_lrp_1.0': (1.0, 0.4),
	# 'ros_0.6_lrp_0.2': (0.2, 0.6),
}

try:
	results = pd.read_csv('output/lrp1-all-conditions.csv')
	bax_steady = np.loadtxt('output/bax_steady.csv', delimiter=',')
	cas3_steady = np.loadtxt('output/cas3_steady.csv', delimiter=',')
	celldeath_steady = np.loadtxt('output/celldeath_steady.csv', delimiter=',')
except FileNotFoundError:
	sols = {}
	bax_steady = np.zeros((N, M))
	cas3_steady = np.zeros((N, M))
	celldeath_steady = np.zeros((N, M))

	for i, lrp1ag_weight in enumerate(ws_lrp1ag):
		for j, ros_weight in enumerate(ws_ros):
			w_new = w.copy()
			w_new[0] = lrp1ag_weight
			w_new[12] = ros_weight
			sol = solve_ivp(LRP1_ODE.ODEfunc, tspan, y0, args=(tau, ymax, w_new, n, EC50,), t_eval=t_eval)
			
			for name, (w1, w2) in conditions.items():
				if sols.get(name, None):
					continue
				if isclose(lrp1ag_weight, w1) and isclose(ros_weight, w2):
					sols[name] = sol
					
			bax_steady[i, j] = sol.y[bax_idx, -1]
			cas3_steady[i, j] = sol.y[cas3_idx, -1]
			celldeath_steady[i, j] = sol.y[celldeath_idx, -1]

	# Save example runs in dataframe
	dfs = []
	for name, sol in sols.items():
		sol_df = pd.DataFrame(sol.y.T, index=sol.t, columns=speciesNames).melt(var_name='species', value_name='activity', ignore_index=False).reset_index(names='time')
		sol_df['condition'] = name
		dfs.append(sol_df)

	results = pd.concat(dfs).sort_values(['condition', 'species', 'time'])
	results.to_csv('output/lrp1-all-conditions.csv', index=False)

	np.savetxt('output/bax_steady.csv', bax_steady, delimiter=',')
	np.savetxt('output/cas3_steady.csv', cas3_steady, delimiter=',')
	np.savetxt('output/celldeath_steady.csv', celldeath_steady, delimiter=',')

results['condition'] = results['condition'].astype('category')
display(results)

# %%
steady_long = results.query('time == @tspan[1]').drop(columns='time')

# %% Plot responses of Bax, cas3, and cellDeath as heatmaps
for species, matrix in zip(['Bax', 'cas3', 'cellDeath'], [bax_steady, cas3_steady, celldeath_steady]):
	fig, ax = plt.subplots()
	sns.heatmap(
		matrix[::-1, :],
		cmap = 'rocket',
		cbar_kws = {'label': f'{species} steady state'},
		xticklabels = [f'{w:0.2f}' for w in ws_ros],
		yticklabels = [f'{w:0.1f}' for w in ws_lrp1ag[::-1]],
		ax = ax,
	)
	ax.set(xlabel='ROS weight', ylabel='LRP1ag weight')
	ax.figure.set_size_inches(6, 6)
	ax.figure.savefig(f'output/LRP1ag-ROS-{species}.png')

# %% Plot shift in ROS vs. cellDeath curve with increasing LRP1ag
palette = sns.color_palette('crest', n_colors=N)
fig, ax = plt.subplots()
for i, lrp1ag_weight in enumerate(ws_lrp1ag):
	plt.plot(ws_ros, celldeath_steady[i, :], color=palette[i], marker='x', label=f'{lrp1ag_weight:0.1f}')
ax.set(xlabel='ROS weight', ylabel='cellDeath activity')
plt.legend(title='LRP1ag weight')
fig.set_size_inches(5, 4)
fig.savefig(f'output/LRP1ag-ROS-cellDeath-shift.png', bbox_inches='tight')

# %% Plot LRP1ag vs. cellDeath curve at ROS = 0.4
fig, ax = plt.subplots()
plt.plot(ws_lrp1ag, celldeath_steady[:, 8], color='k', marker='x')
ax.set(ylim=(0, 1), xlabel='LRP1ag activity', ylabel='cellDeath activity')
fig.set_size_inches(5, 4)
fig.savefig(f'output/LRP1ag-cellDeath-ROS-0.4.png', bbox_inches='tight')

# %% Save steady state for each example condition
steady_base = steady_long.pivot(index='species', columns='condition', values='activity').loc[speciesNames]
steady_base['ros_OE_lrp_0.2'] = steady_base['ros_0.4_lrp_0.2'] - steady_base['ros_0.05_lrp_0.2']
steady_base['ros_0.4_lrp_OE'] = steady_base['ros_0.4_lrp_1.0'] - steady_base['ros_0.4_lrp_0.2']
steady_base.to_csv('output/steady-state-all-conditions.csv')

# %% Plot time courses for LRP1ag perturbation
species_of_interest = ['ROS', 'LRP1ag', 'Bcl2', 'Bax', 'cas3', 'cellDeath']

time_course_fig, axs = plt.subplots(2, 1)
for i, condition in enumerate(('ros_0.05_lrp_0.2', 'ros_0.4_lrp_0.2')):
	w_new = w.copy()
	w_new[0] = 1.0
	w_new[12] = conditions[condition][1]
	y0_new = steady_base.loc[speciesNames, condition]
	tspan_new = [tspan[1], tspan[1]*2]
	sol = solve_ivp(LRP1_ODE.ODEfunc, tspan_new, y0_new, args=(tau, ymax, w_new, n, EC50,), t_eval=np.linspace(*tspan_new, len(t_eval)))

	prev_time_course = (
		results.
		query('condition == @condition').
		pivot(index='species', columns='time', values='activity').
		loc[species_of_interest, :]
	)
	new_time_course = pd.DataFrame(sol.y, index=speciesNames, columns=sol.t).loc[species_of_interest]

	ax = sns.heatmap(
		data = prev_time_course.join(new_time_course.drop(columns=50)),
		vmin = 0, vmax = 1,
		cmap = 'rocket',
		cbar_kws = {'label': 'species activity'},
		yticklabels = species_of_interest,
		ax = axs[i],
	)
	ax.set(title=f'ROS input = {w_new[12]}', ylabel=None)
time_course_fig.set_size_inches(6, 4)
time_course_fig.tight_layout(h_pad=2)
time_course_fig.savefig(f'output/LRP1-time-courses.png')

# %% Simulate species knockdowns and different LRP1-agonist levels under different ROS conditions
steady_kd = {condition: np.zeros((S, S)) for condition in conditions}

for i in range(S):
	ymax_kd = ymax.copy()
	ymax_kd[i] = 0
	for condition in steady_kd:
		y_steady = steady_base[condition]
		lrp1ag_weight, ros_weight = conditions[condition]
		w_new = w.copy()
		w_new[0] = lrp1ag_weight
		w_new[12] = ros_weight
		sol_kd = solve_ivp(LRP1_ODE.ODEfunc, tspan, y_steady, args=(tau, ymax_kd, w_new, n, EC50,), t_eval=t_eval)
		steady_kd[condition][:, i] = sol_kd.y[:, -1]

# %% Plot sensitivity matrix for each condition
celldeath_sens_raw = {}
for condition in conditions:
	diff = steady_kd[condition] - steady_base[condition].to_numpy()[:, None]
	celldeath_sens_raw[condition] = diff[celldeath_idx, :]

	fig, ax = plt.subplots()
	sns.heatmap(
		diff[sorted_indices, :][:, sorted_indices],
		vmin = -1, center = 0, vmax = 1,
		cmap = 'vlag',
		cbar_kws = {'label': f'Change in activity upon knockdown'},
		xticklabels = sorted_species,
		yticklabels = sorted_species,
		square = True,
		linewidth = 0.1, linecolor = '#dddddd',
		ax = ax,
	)
	ax.set(
		xlabel = 'Knockdown species',
		ylabel = 'Affected species',
		title = f'condition = {condition}',
	)
	fig.set_size_inches(12, 12)
	fig.savefig(f'output/LRP1-sensitivity-{condition.replace("_", "-")}.png', bbox_inches='tight')

# %% Plot cell death steady state under different species knockdowns and high/low LRP1ag
celldeath_sens = pd.DataFrame(data=celldeath_sens_raw, index=pd.Index(speciesNames, name='kd_species'))
celldeath_sens.to_csv('output/celldeath_sens.csv')

celldeath_kd = celldeath_sens[['ros_0.4_lrp_0.2', 'ros_0.4_lrp_1.0']].copy()
celldeath_kd.index.names = ['kd_species']
celldeath_kd.loc['none', :] = 0
celldeath_kd = celldeath_kd + steady_base.loc['cellDeath', celldeath_kd.columns]
celldeath_kd_long = (
	celldeath_kd.
	reset_index(drop=False).
	melt(id_vars='kd_species', var_name='condition', value_name='celldeath')
)

lrp_palette = sns.color_palette('muted', 2)[::-1]
fig = sns.catplot(
	data = celldeath_kd_long,
	x = 'kd_species',
	order = (
		'none', 'Trx', 'PI3K', 'Akt', 'ASK1', 'JNK', 'Bcl2', 'Bax',
	),
	y = 'celldeath',
	kind = 'bar',
	hue = 'condition', palette = lrp_palette,
	dodge = False,
	row = 'condition',
	height = 1, aspect = 4,
	facet_kws = {
		'ylim': (0, 1),
		# 'xlabel': 'Knockdown species',
		# 'ylabel': 'Cell death',
	}
)


# %%
fig, axs = plt.subplots(4, 2)
validation_species = ('ERK12', 'PI3K', 'Akt', 'NFkB', 'Bax', 'Bcl2', 'cas3', 'apoptosis')

for species, ax in zip(validation_species, axs.flatten()):
	sns.barplot(
		data = steady_long[steady_long['species'] == species],
		x = 'condition',
		y = 'activity',
		order = ['ros_0.4_lrp_0.2', 'ros_0.4_lrp_1.0'],
		palette = lrp_palette,
		ax = ax,
	)
	ax.set(
		xticklabels = ('LRP1-ag 0.2', 'LRP1-ag 1.0'),
		xlabel = '',
		ylim = (0, 1),
		ylabel = f'{species} activity',
	)
fig.set_size_inches(6, 9)
fig.tight_layout()
fig.savefig('output/LRP1-validation.png')

# %%
