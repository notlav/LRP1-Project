# LRP1_ODE.py 
# Automatically generated by Netflux on 18-Jan-2023 
import numpy as np 
def ODEfunc(t,y,tau,ymax,w,n,EC50): 
	Akt = 0 
	AP1 = 1 
	apoptosis = 2 
	ASK1 = 3 
	Bad = 4 
	Bax = 5 
	Bcl2 = 6 
	Bcl2t = 7 
	Bim = 8 
	CAD = 9 
	cas3 = 10 
	cas9 = 11 
	cellDeath = 12 
	CREB = 13 
	cytc = 14 
	DNAfrag = 15 
	EGF = 16 
	EGFR = 17 
	ERBB = 18 
	ERK12 = 19 
	FGF = 20 
	FGFR = 21 
	FLT3 = 22 
	FLT3L = 23 
	iCAD = 24 
	iCADt = 25 
	IGF1 = 26 
	IGF1R = 27 
	IkB = 28 
	IKK = 29 
	JAK = 30 
	JNK = 31 
	KIT = 32 
	MEK12 = 33 
	MEK36 = 34 
	MEK47 = 35 
	MOMP = 36 
	NFkB = 37 
	NOX = 38 
	Noxa = 39 
	NRG1 = 40 
	p38 = 41 
	p53 = 42 
	PARP = 43 
	PDGF = 44 
	PDGFR = 45 
	PDK1 = 46 
	PI3K = 47 
	PUMA = 48 
	Raf = 49 
	Ras = 50 
	ROS = 51 
	RSK = 52 
	SCF = 53 
	Smac = 54 
	STAT = 55 
	Trx = 56 
	Trxt = 57 
	VEGF = 58 
	VEGFR = 59 
	xIAP = 60 
	xIAPt = 61 
	LRP1 = 62 
	LRP1ag = 63 
	dydt = np.zeros(64) 
	dydt[Akt] = (act(y[PDK1],w[93],n[93],EC50[93])*ymax[Akt] - y[Akt])/tau[Akt] 
	dydt[AP1] = (act(y[JNK],w[73],n[73],EC50[73])*ymax[AP1] - y[AP1])/tau[AP1] 
	dydt[apoptosis] = (act(y[DNAfrag],w[54],n[54],EC50[54])*ymax[apoptosis] - y[apoptosis])/tau[apoptosis] 
	dydt[ASK1] = (OR(inhib(y[Trx],w[42],n[42],EC50[42]),AND(w[96],[inhib(y[Akt],w[96],n[96],EC50[96]),act(y[ROS],w[96],n[96],EC50[96])]))*ymax[ASK1] - y[ASK1])/tau[ASK1] 
	dydt[Bad] = (OR(inhib(y[Akt],w[18],n[18],EC50[18]),act(y[JNK],w[74],n[74],EC50[74]))*ymax[Bad] - y[Bad])/tau[Bad] 
	dydt[Bax] = (OR(AND(w[17],[inhib(y[Akt],w[17],n[17],EC50[17]),act(y[ROS],w[17],n[17],EC50[17])]),OR(inhib(y[Bcl2],w[21],n[21],EC50[21]),act(y[p53],w[87],n[87],EC50[87])))*ymax[Bax] - y[Bax])/tau[Bax] 
	dydt[Bcl2] = (OR(AND(w[20],[inhib(y[Bad],w[20],n[20],EC50[20]),act(y[Bcl2t],w[20],n[20],EC50[20])]),OR(AND(w[22],[act(y[Bcl2t],w[22],n[22],EC50[22]),inhib(y[Bim],w[22],n[22],EC50[22])]),OR(AND(w[29],[act(y[Bcl2t],w[29],n[29],EC50[29]),inhib(y[JNK],w[29],n[29],EC50[29])]),OR(AND(w[31],[act(y[Bcl2t],w[31],n[31],EC50[31]),inhib(y[Noxa],w[31],n[31],EC50[31])]),AND(w[35],[act(y[Bcl2t],w[35],n[35],EC50[35]),inhib(y[PUMA],w[35],n[35],EC50[35])])))))*ymax[Bcl2] - y[Bcl2])/tau[Bcl2] 
	dydt[Bcl2t] = (OR(w[4],OR(act(y[CREB],w[52],n[52],EC50[52]),OR(act(y[NFkB],w[84],n[84],EC50[84]),act(y[STAT],w[98],n[98],EC50[98]))))*ymax[Bcl2t] - y[Bcl2t])/tau[Bcl2t] 
	dydt[Bim] = (OR(inhib(y[Akt],w[19],n[19],EC50[19]),OR(act(y[JNK],w[75],n[75],EC50[75]),act(y[p38],w[86],n[86],EC50[86])))*ymax[Bim] - y[Bim])/tau[Bim] 
	dydt[CAD] = (inhib(y[iCAD],w[26],n[26],EC50[26])*ymax[CAD] - y[CAD])/tau[CAD] 
	dydt[cas3] = (OR(inhib(y[xIAP],w[43],n[43],EC50[43]),act(y[cas9],w[51],n[51],EC50[51]))*ymax[cas3] - y[cas3])/tau[cas3] 
	dydt[cas9] = (OR(inhib(y[xIAP],w[44],n[44],EC50[44]),act(y[cytc],w[53],n[53],EC50[53]))*ymax[cas9] - y[cas9])/tau[cas9] 
	dydt[cellDeath] = (act(y[apoptosis],w[47],n[47],EC50[47])*ymax[cellDeath] - y[cellDeath])/tau[cellDeath] 
	dydt[CREB] = (act(y[RSK],w[97],n[97],EC50[97])*ymax[CREB] - y[CREB])/tau[CREB] 
	dydt[cytc] = (act(y[MOMP],w[82],n[82],EC50[82])*ymax[cytc] - y[cytc])/tau[cytc] 
	dydt[DNAfrag] = (AND(w[32],[act(y[CAD],w[32],n[32],EC50[32]),inhib(y[PARP],w[32],n[32],EC50[32])])*ymax[DNAfrag] - y[DNAfrag])/tau[DNAfrag] 
	dydt[EGF] = (w[5]*ymax[EGF] - y[EGF])/tau[EGF] 
	dydt[EGFR] = (act(y[EGF],w[25],n[25],EC50[25])*ymax[EGFR] - y[EGFR])/tau[EGFR] 
	dydt[ERBB] = (act(y[NRG1],w[41],n[41],EC50[41])*ymax[ERBB] - y[ERBB])/tau[ERBB] 
	dydt[ERK12] = (act(y[MEK12],w[79],n[79],EC50[79])*ymax[ERK12] - y[ERK12])/tau[ERK12] 
	dydt[FGF] = (w[6]*ymax[FGF] - y[FGF])/tau[FGF] 
	dydt[FGFR] = (act(y[FGF],w[34],n[34],EC50[34])*ymax[FGFR] - y[FGFR])/tau[FGFR] 
	dydt[FLT3] = (act(y[FLT3L],w[33],n[33],EC50[33])*ymax[FLT3] - y[FLT3])/tau[FLT3] 
	dydt[FLT3L] = (w[7]*ymax[FLT3L] - y[FLT3L])/tau[FLT3L] 
	dydt[iCAD] = (AND(w[24],[inhib(y[cas3],w[24],n[24],EC50[24]),act(y[iCADt],w[24],n[24],EC50[24])])*ymax[iCAD] - y[iCAD])/tau[iCAD] 
	dydt[iCADt] = (w[8]*ymax[iCADt] - y[iCADt])/tau[iCADt] 
	dydt[IGF1] = (w[9]*ymax[IGF1] - y[IGF1])/tau[IGF1] 
	dydt[IGF1R] = (act(y[IGF1],w[68],n[68],EC50[68])*ymax[IGF1R] - y[IGF1R])/tau[IGF1R] 
	dydt[IkB] = (inhib(y[IKK],w[28],n[28],EC50[28])*ymax[IkB] - y[IkB])/tau[IkB] 
	dydt[IKK] = (act(y[Akt],w[45],n[45],EC50[45])*ymax[IKK] - y[IKK])/tau[IKK] 
	dydt[JAK] = (OR(act(y[EGFR],w[55],n[55],EC50[55]),OR(act(y[ERBB],w[58],n[58],EC50[58]),OR(act(y[FGFR],w[62],n[62],EC50[62]),OR(act(y[FLT3],w[65],n[65],EC50[65]),OR(act(y[IGF1R],w[69],n[69],EC50[69]),OR(act(y[KIT],w[76],n[76],EC50[76]),OR(act(y[PDGFR],w[90],n[90],EC50[90]),act(y[VEGFR],w[99],n[99],EC50[99]))))))))*ymax[JAK] - y[JAK])/tau[JAK] 
	dydt[JNK] = (act(y[MEK47],w[81],n[81],EC50[81])*ymax[JNK] - y[JNK])/tau[JNK] 
	dydt[KIT] = (act(y[SCF],w[30],n[30],EC50[30])*ymax[KIT] - y[KIT])/tau[KIT] 
	dydt[MEK12] = (act(y[Raf],w[95],n[95],EC50[95])*ymax[MEK12] - y[MEK12])/tau[MEK12] 
	dydt[MEK36] = (act(y[ASK1],w[48],n[48],EC50[48])*ymax[MEK36] - y[MEK36])/tau[MEK36] 
	dydt[MEK47] = (act(y[ASK1],w[49],n[49],EC50[49])*ymax[MEK47] - y[MEK47])/tau[MEK47] 
	dydt[MOMP] = (act(y[Bax],w[50],n[50],EC50[50])*ymax[MOMP] - y[MOMP])/tau[MOMP] 
	dydt[NFkB] = (inhib(y[IkB],w[27],n[27],EC50[27])*ymax[NFkB] - y[NFkB])/tau[NFkB] 
	dydt[NOX] = (0*ymax[NOX] - y[NOX])/tau[NOX] 
	dydt[Noxa] = (act(y[p53],w[88],n[88],EC50[88])*ymax[Noxa] - y[Noxa])/tau[Noxa] 
	dydt[NRG1] = (w[10]*ymax[NRG1] - y[NRG1])/tau[NRG1] 
	dydt[p38] = (act(y[MEK36],w[80],n[80],EC50[80])*ymax[p38] - y[p38])/tau[p38] 
	dydt[p53] = (act(y[AP1],w[46],n[46],EC50[46])*ymax[p53] - y[p53])/tau[p53] 
	dydt[PARP] = (inhib(y[cas3],w[23],n[23],EC50[23])*ymax[PARP] - y[PARP])/tau[PARP] 
	dydt[PDGF] = (w[11]*ymax[PDGF] - y[PDGF])/tau[PDGF] 
	dydt[PDGFR] = (act(y[PDGF],w[38],n[38],EC50[38])*ymax[PDGFR] - y[PDGFR])/tau[PDGFR] 
	dydt[PDK1] = (act(y[PI3K],w[94],n[94],EC50[94])*ymax[PDK1] - y[PDK1])/tau[PDK1] 
	dydt[PI3K] = (OR(act(y[LRP1],w[2],n[2],EC50[2]),OR(act(y[EGFR],w[56],n[56],EC50[56]),OR(act(y[ERBB],w[59],n[59],EC50[59]),OR(act(y[FGFR],w[63],n[63],EC50[63]),OR(act(y[FLT3],w[66],n[66],EC50[66]),OR(act(y[IGF1R],w[70],n[70],EC50[70]),OR(act(y[KIT],w[77],n[77],EC50[77]),OR(act(y[PDGFR],w[91],n[91],EC50[91]),act(y[VEGFR],w[100],n[100],EC50[100])))))))))*ymax[PI3K] - y[PI3K])/tau[PI3K] 
	dydt[PUMA] = (act(y[p53],w[89],n[89],EC50[89])*ymax[PUMA] - y[PUMA])/tau[PUMA] 
	dydt[Raf] = (act(y[Ras],w[40],n[40],EC50[40])*ymax[Raf] - y[Raf])/tau[Raf] 
	dydt[Ras] = (OR(act(y[LRP1],w[3],n[3],EC50[3]),OR(act(y[EGFR],w[57],n[57],EC50[57]),OR(act(y[ERBB],w[60],n[60],EC50[60]),OR(act(y[FGFR],w[64],n[64],EC50[64]),OR(act(y[FLT3],w[67],n[67],EC50[67]),OR(act(y[IGF1R],w[71],n[71],EC50[71]),OR(act(y[KIT],w[78],n[78],EC50[78]),OR(act(y[PDGFR],w[92],n[92],EC50[92]),act(y[VEGFR],w[101],n[101],EC50[101])))))))))*ymax[Ras] - y[Ras])/tau[Ras] 
	dydt[ROS] = (OR(w[12],act(y[NOX],w[85],n[85],EC50[85]))*ymax[ROS] - y[ROS])/tau[ROS] 
	dydt[RSK] = (act(y[ERK12],w[61],n[61],EC50[61])*ymax[RSK] - y[RSK])/tau[RSK] 
	dydt[SCF] = (w[13]*ymax[SCF] - y[SCF])/tau[SCF] 
	dydt[Smac] = (act(y[MOMP],w[83],n[83],EC50[83])*ymax[Smac] - y[Smac])/tau[Smac] 
	dydt[STAT] = (act(y[JAK],w[72],n[72],EC50[72])*ymax[STAT] - y[STAT])/tau[STAT] 
	dydt[Trx] = (AND(w[36],[inhib(y[ROS],w[36],n[36],EC50[36]),act(y[Trxt],w[36],n[36],EC50[36])])*ymax[Trx] - y[Trx])/tau[Trx] 
	dydt[Trxt] = (w[14]*ymax[Trxt] - y[Trxt])/tau[Trxt] 
	dydt[VEGF] = (w[15]*ymax[VEGF] - y[VEGF])/tau[VEGF] 
	dydt[VEGFR] = (act(y[VEGF],w[39],n[39],EC50[39])*ymax[VEGFR] - y[VEGFR])/tau[VEGFR] 
	dydt[xIAP] = (AND(w[37],[inhib(y[Smac],w[37],n[37],EC50[37]),act(y[xIAPt],w[37],n[37],EC50[37])])*ymax[xIAP] - y[xIAP])/tau[xIAP] 
	dydt[xIAPt] = (w[16]*ymax[xIAPt] - y[xIAPt])/tau[xIAPt] 
	dydt[LRP1] = (act(y[LRP1ag],w[1],n[1],EC50[1])*ymax[LRP1] - y[LRP1])/tau[LRP1] 
	dydt[LRP1ag] = (w[0]*ymax[LRP1ag] - y[LRP1ag])/tau[LRP1ag] 
	return dydt 

# utility functions
 
def act(x, w, n, EC50): 
	# hill activation function with parameters w (weight), n (Hill coeff), EC50 
	beta = ((EC50**n)-1)/(2*EC50**n-1) 
	K = (beta-1)**(1/n) 
	fact = w*(beta*x**n)/(K**n+x**n) 
	if fact > w: 
		fact = w 
	return fact
 
def inhib(x, w, n, EC50): 
	# inverse hill function with parameters w (weight), n (Hill coeff), EC50 
	finhib = w - act(x, w, n, EC50) 
	return finhib
 
def OR(x, y): 
	# OR logic gate 
	z = x + y - x*y 
	return z
 
def AND(w, reactList): 
	# AND logic gate, multiplying all of the reactants together 
	if w == 0: 
		z = 0 
	else: 
		p = np.array(reactList).prod() 
		z = p/w**(len(reactList)-2) 
	return z
 
